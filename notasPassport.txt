/////video NODE.JS LOGIN CON PASSPORT, EXPRESS Y MONGODB///
///FAZT CODE///
https://www.youtube.com/watch?v=uVltgEcjNww


instalar: 
    express 
    mongoose (modulo para conectarme de mongoDB a NODE.JS, es un ORM para definir los datos en mongodb.
    Y que mongodb no tiene esquemas, con lo cual podemos comparar los datos de una forma mas sencilla)
    ejs-mate (crear plantillas, codigo html q nos permita crear paginas web)
    connect-flash (enviarme mensajes a multiples paginas "stateless", ocurrio un error 
    o las credenciales on invalidas)
    morgan (ver en consola lo que el usuario esta pidiendo, peticiones http q estan pidiendo)
    passport (autenticacion)
    passport-local (autenticacion de manera local, la autenticacion la  hacemos desde nuestro servidor)
    bycrypt-node.js (encriptar las contraseñas, las vuelve una cadena de texto)

nodemon no es una dependecia pricipal de mi proyecto, por eso lo instalo como dependecia
npm i nodemon -D
lo instalar en otra seccion DEV DEPENDENCIES. 

***ESQUELETO***
///src/// →
    index.js 
    ///routes/// →
    dataBase.js 
    keys.js (direccion de mi base de datos, keys de mis base de datos...)
    ///models/// → 
    ///passport/// →
    ///views/// →

----------------------------------------------------------------------------------
    
index.js 
    *importo express 
    const app = express()
    escucho el puerto 
    app.listen(...)

    *importar mongodb 
    solo importa el archivo database.js 
    require('./database')

    Si tengo un "servicio" (heroku, glitch, netlify, etc) puedo usar el process.env para 
    poder usar el puerto que me asigna el servicio.
    app.set('port', process.env.PORT || 3000)

    y puedo concatenar distinos mensajes: 
    app.listen(app.get('port'), () => {
        console.log(`Server on port ${app.get('port')}`)
    })

    *importo ejs 
    *importo path (unir directorios)
    app.engine...
    app.set(...)

    como node.js no sabe donde estan las vistas. 
    es importante establecer la carpeta de vistas. 
    app.set("views", path.join(__dirname, "views"))
    __dirname es una constante que me devuelve donde esta este archivo (el usuario, escritorio...etc)
    es un concepto basico de express. 

    *los middleware van antes de las rutas.

    *importamos morgan 
    este modulo 
    app.use(morgan('dev'))
    eso lo que hace es mostrarme con la terminal lo que estoy haciendo en localHost.
    ejemplo: GET / 304 6.854ms -
        significa que la ruta inicial del navegador ("/") esta haciendo una peticion GET. 
        el servidor le ha respondido con un 304
        y eso tardo 6.854 milisegundos en mostrarlo.

    *recordar poner los middleware para recibir datos del cliente:
    app.use(json())
    app.use(urlencoded({extended: false}))

    *importar routes. 
    para usarlo y usarlo uso el metodo: app.use(routes)
    asi el archivo principal (index.js) conoce bien las rutas.

///routes/// →
    index.js 
        importar express
        importar express.Router()
        pongo las rutas:
            get ("/") → render plantillas. 
            get ("/signup")
            post ("/signup")
            get ("/login")
            post ("/login")
        exportar Router  para poder importarlo en el servidor. 

    
///views///
    index.ejs
        funcionalidad extendida.
        ademas de codigo html vamos a poder usar condicioneles y bucles.


///passport///
    local-auth.js 
        importo passsport 
        requiero passport-local (Strategy)
        con esto tenemos funcionalidad con passport. 

        funcion para recibir los parametros: 
            
            passport.use("local-register", new Strategy (
                {} ← un objeto de configuracion. (que tipo de datos recibimos del cliente)
                ()=>{} ← callback de ejecucion (que vamos a hacer con esos datos)
            ))

            ejemplo: 
            passport.use("local-signup", new LocalStratedy(
                {
                    *usernameField: "email", ← nombre del email en el formulario
                    *passwordField: "password" ← nombre del password en el formulario
                    *passReqToCallback: true ← lo que hace es decir que ademas del email 
                    y el passport tambien recibiremos los request. (req.) y podemos tambien 
                    almacenarlos
                },
                (req, email, passport, done) =>{
                    done es una funcion, otro callback.
                    es un parametro para devolver al cliente. 
                }
            ))

///database.js///
    importo mongoose 
    importo la key de mongodb. (desde keys.js)
        keys.js es un objeto y puedo importar mongodb.URI de la siguiente forma: 
        const {mongodb} = require("./keys")

    para hacer la conexion de mongoose a la base de datos: 
        mongoose.connect (mongodb.URI, {

        })
        .then(db => console.log("DB is connected"))
        .catch(err => console.error(err))


///keys.js///
    aqui voy a poner las keys de mi base de datos.

    module.exports = {
        mongodb: {
            URI: "mongodb://localhost:27017/node-login-passport-local"
            ese "node-login-passport-local" es el nombre que le voy a dar a mi base de datos.
        },
    }

    mongodb.URI va a tener mi direccion de mi base de datos.

///inicializar mongodb///
    en la terminal poner: mongodb

                